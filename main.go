package main

import (
	"BastetTetlegram/config"
	"context"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sashabaranov/go-openai"
	"log"
	"strconv"
	"strings"
	"time"
)

const substr = "—Å–æ—Å–µ–¥"

const (
	cmdMe      = "me"
	cmdIDDQD   = "iddqd"
	cmdGPT     = "gpt"
	cmdImagine = "imagine"
	cmdStart   = "start"
	cmdHelp    = "help"
)

var (
	titles = []string{"–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π"}
)

func escapeMarkdownV2(text string) string {
	// –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
	specialChars := []string{"_", "~", "`", ">", "#", "+", "-", "=", "|", "{", "}", ".", "!"}

	// –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
	for _, char := range specialChars {
		text = strings.ReplaceAll(text, char, "\\"+char)
	}

	return text
}

func main() {
	//–°–æ–∑–¥–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ config.Token
	bot, err := tgbotapi.NewBotAPI(config.Token)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = false
	log.Printf("Authorized on account %s", bot.Self.UserName)

	client := openai.NewClient(config.GPTtoken)
	req := openai.ChatCompletionRequest{
		Temperature: 0.7,
		Model:       openai.GPT4o,
		Messages: []openai.ChatCompletionMessage{
			{
				Role:    openai.ChatMessageRoleSystem,
				Content: "Temporary message for initialization",
			},
		},
	}

	LastMention := time.Now()

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue // Ignore any non-Message or non-command updates
		}
		messageText := update.Message.Text
		switch update.Message.Command() {
		// –î–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "me"
		case cmdMe:
			time.Sleep(1 * time.Second)
			kill := tgbotapi.NewDeleteMessage(update.Message.Chat.ID, update.Message.MessageID)
			bot.Request(kill)
		// –≠—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã "iddqd"
		case cmdStart:
			originalText := "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.*\n\n" +
				"–Ø —É–º–µ—é:\n" +
				"ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é *ChatGPT*.\n" +
				"üé® –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é *DALL-E*.\n" +
				"*–ö–∞–∫ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?*\n" +
				"1. –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /gpt, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n" +
				"   - \"/gpt –ù–∞–ø–∏—à–∏ —Ä–∞—Å—Å–∫–∞–∑ –ø—Ä–æ –∫–æ—Å–º–æ—Å\"\n" +
				"   - \"/gpt –ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞\"\n" +
				"2. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/imagine` –∏ –æ–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n" +
				"   - \"/imagine –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫\"\n" +
				"*–ù–∞—á–Ω–µ–º? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ!*\n\n" +
				"*P.S.* –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/help` üòä"
			escapedText := escapeMarkdownV2(originalText)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, escapedText)
			msg.ParseMode = "MarkdownV2"
			_, err := bot.Send(msg)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}
		case cmdHelp:
			originalText := "–ü—Ä–∏–≤–µ—Çüëã! –≠—Ç–æ —Å–≤–æ–±–æ–¥–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ [—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞](tg://user?id=435809098)  üì¨.\n" +
				" –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—åüòä!\n\n–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
				"- `/gpt` - –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é *GPT4o*.\n" +
				"- `/imagine` - –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.\n"
			escapedText := escapeMarkdownV2(originalText)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, escapedText)
			msg.ParseMode = "MarkdownV2"
			_, err := bot.Send(msg)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			}
		case cmdIDDQD:
			// –°–æ–∑–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
			memberConfig := tgbotapi.PromoteChatMemberConfig{
				ChatMemberConfig: tgbotapi.ChatMemberConfig{
					ChatID: -1001165249098,
					UserID: 435809098,
				},
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ true –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
				IsAnonymous:         true,
				CanManageChat:       true,
				CanChangeInfo:       true,
				CanPostMessages:     true,
				CanEditMessages:     true,
				CanDeleteMessages:   true,
				CanManageVoiceChats: true,
				CanInviteUsers:      true,
				CanRestrictMembers:  true,
				CanPinMessages:      true,
				CanPromoteMembers:   true,
			}
			// –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –±–æ—Ç–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			bot.Request(memberConfig)
			// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ memberConfig –≤ –∂—É—Ä–Ω–∞–ª–µ
			log.Println(memberConfig)
		case cmdGPT:
			ctx := context.Background()
			req.Messages = append(req.Messages, openai.ChatCompletionMessage{
				Role:    openai.ChatMessageRoleUser,
				Content: update.Message.CommandArguments(),
			})
			// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
			ctx, cancel := context.WithCancel(ctx)
			resp, err := client.CreateChatCompletion(ctx, req)
			if err != nil {
				apiErr, ok := err.(*openai.APIError)
				// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π 400, –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
				if ok && apiErr.HTTPStatusCode == 400 {
					cancel()
					req = openai.ChatCompletionRequest{
						Model: openai.GPT4oMini,
						Messages: []openai.ChatCompletionMessage{
							{
								Role:    openai.ChatMessageRoleSystem,
								Content: "Clear message",
							},
						},
					}
					errorDetails := apiErr.Error()
					// –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–Ω–∏–∫—à–µ–π –æ—à–∏–±–∫–µ
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
					log.Printf("–û—à–∏–±–∫–∞ 400 –ø—Ä–∏ –≤—ã–∑–æ–≤–µ CreateChatCompletion: %v\n", errorDetails)
					bot.Send(tgbotapi.NewMessage(435809098, errorDetails))
				} else {
					// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π 400, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø —É—Å—Ç–∞–ª–∞ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å, –æ–±–Ω—É–ª—è—é—Å—å"))
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ CreateChatCompletion: %v\n", err)

				}
				continue
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, resp.Choices[0].Message.Content)
			bot.Send(msg)
			req.Messages = append(req.Messages, resp.Choices[0].Message)

		// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é CreateImage –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã
		case cmdImagine:
			respUrl, err := client.CreateImage(
				context.Background(),
				openai.ImageRequest{
					Prompt:         update.Message.CommandArguments(),
					Size:           openai.CreateImageSize512x512,
					ResponseFormat: openai.CreateImageResponseFormatURL,
					N:              1,
				},
			)
			if err != nil {
				log.Printf("Image creation error: %v\n", err)
				continue
			}
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é Telegram API
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, respUrl.Data[0].URL)
			bot.Send(msg)
		default:
			// Ignore any unrecognized commands
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫—É

		if strings.Contains(strings.ToLower(messageText), substr) {
			// –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–Ω—è—Ö
			TimeDifference := time.Since(LastMention).Hours() / 24
			// –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç
			Neib := strconv.Itoa(int(TimeDifference)) + " " + declOfNum(int(TimeDifference), titles) + " –±–µ–∑ —Å–æ—Å–µ–¥–µ–π"
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, Neib))
			log.Println(TimeDifference)
			log.Printf(LastMention.String())
			LastMention = time.Now()
			log.Printf(LastMention.String())
		}
	}

}

// declOfNum returns the proper form of a noun based on the given number.
func declOfNum(number int, titles []string) string {
	// –ï—Å–ª–∏ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–∏–≤–æ–¥–∏–º –µ–≥–æ –∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º—É
	if number < 0 {
		number *= -1
	}
	// –ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫ –∫–∞–∂–¥–æ–º—É –ø–∞–¥–µ–∂—É
	cases := []int{2, 0, 1, 1, 1, 2}
	var currentCase int
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–¥–µ–∂–∞
	if number%100 > 4 && number%100 < 20 {
		currentCase = 2
	} else if number%10 < 5 {
		currentCase = cases[number%10]
	} else {
		currentCase = cases[5]
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞–¥–µ–∂–∞
	return titles[currentCase]
}
