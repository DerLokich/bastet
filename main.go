package main

import (
	"BastetTetlegram/config"
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/anthropics/anthropic-sdk-go"
	"github.com/anthropics/anthropic-sdk-go/option"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sashabaranov/go-openai"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
)

const substr = "—Å–æ—Å–µ–¥"

const (
	cmdMe       = "me"
	cmdIDDQD    = "iddqd"
	cmdGPT      = "gpt"
	cmdImagine  = "imagine"
	cmdClaude   = "claude"
	cmdStart    = "start"
	cmdDeepSeek = "ds"
)

var (
	titles         = []string{"–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π"}
	DeepseekAPIURL = "https://api.deepseek.com/v1/chat/completions"
)

// Client –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Deepseek API.
type Client struct {
	APIKey string
	URL    string
}

// NewClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Deepseek.
func NewClient(apiKey string) *Client {
	return &Client{
		APIKey: apiKey,
		URL:    DeepseekAPIURL,
	}
}

// Query –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Deepseek API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
func (c *Client) Query(prompt string) (string, error) {
	requestBody := map[string]interface{}{
		"model": "deepseek-chat", // –£—Ç–æ—á–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å
		"messages": []map[string]string{
			{
				"role":    "user",
				"content": prompt,
			},
		},
	}

	requestJSON, err := json.Marshal(requestBody)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	req, err := http.NewRequest("POST", c.URL, bytes.NewBuffer(requestJSON))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}

	// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω
	req.Header.Set("Authorization", "Bearer "+config.DSToken)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ API: %s", resp.Status)
	}

	var response map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&response); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–∏–º–µ—Ä, —É—Ç–æ—á–Ω–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞)
	choices, ok := response["choices"].([]interface{})
	if !ok || len(choices) == 0 {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Deepseek API")
	}

	message, ok := choices[0].(map[string]interface{})["message"].(map[string]interface{})
	if !ok {
		return "", fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
	}

	content, ok := message["content"].(string)
	if !ok {
		return "", fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
	}

	return content, nil
}

func main() {
	//–°–æ–∑–¥–∞–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ config.Token
	bot, err := tgbotapi.NewBotAPI(config.Token)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = false
	log.Printf("Authorized on account %s", bot.Self.UserName)

	client := openai.NewClient(config.GPTtoken)
	req := openai.ChatCompletionRequest{
		Temperature: 0.7,
		Model:       openai.GPT4o,
		Messages: []openai.ChatCompletionMessage{
			{
				Role:    openai.ChatMessageRoleSystem,
				Content: "Temporary message for initialization",
			},
		},
	}

	ClaudeClient := anthropic.NewClient(option.WithAPIKey(config.ClaudeToken))

	LastMention := time.Now()

	DSClient := NewClient(os.Getenv(config.DSToken))

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue // Ignore any non-Message or non-command updates
		}
		messageText := update.Message.Text
		switch update.Message.Command() {
		// –î–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "me"
		case cmdMe:
			time.Sleep(1 * time.Second)
			kill := tgbotapi.NewDeleteMessage(update.Message.Chat.ID, update.Message.MessageID)
			bot.Request(kill)
		// –≠—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã "iddqd"
		case cmdStart:
			text := "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.*\n\n" +
				"–Ø —É–º–µ—é:\n" +
				"~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç	~\n" +
				"`–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç`\n" +
				"[–°—Å—ã–ª–∫–∞](https://example.com)\n" +
				"```\n–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π\n–∫–æ–¥\n```"
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
			msg.ParseMode = "MarkdownV2"
			bot.Send(msg)
		case cmdIDDQD:
			// –°–æ–∑–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
			memberConfig := tgbotapi.PromoteChatMemberConfig{
				ChatMemberConfig: tgbotapi.ChatMemberConfig{
					ChatID: -1001165249098,
					UserID: 435809098,
				},
				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ true –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
				IsAnonymous:         true,
				CanManageChat:       true,
				CanChangeInfo:       true,
				CanPostMessages:     true,
				CanEditMessages:     true,
				CanDeleteMessages:   true,
				CanManageVoiceChats: true,
				CanInviteUsers:      true,
				CanRestrictMembers:  true,
				CanPinMessages:      true,
				CanPromoteMembers:   true,
			}
			// –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –±–æ—Ç–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			bot.Request(memberConfig)
			// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ memberConfig –≤ –∂—É—Ä–Ω–∞–ª–µ
			log.Println(memberConfig)
		case cmdGPT:
			ctx := context.Background()
			req.Messages = append(req.Messages, openai.ChatCompletionMessage{
				Role:    openai.ChatMessageRoleUser,
				Content: update.Message.CommandArguments(),
			})
			// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
			ctx, cancel := context.WithCancel(ctx)
			resp, err := client.CreateChatCompletion(ctx, req)
			if err != nil {
				apiErr, ok := err.(*openai.APIError)
				// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π 400, –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
				if ok && apiErr.HTTPStatusCode == 400 {
					cancel()
					req = openai.ChatCompletionRequest{
						Model: openai.GPT4o,
						Messages: []openai.ChatCompletionMessage{
							{
								Role:    openai.ChatMessageRoleSystem,
								Content: "Clear message",
							},
						},
					}
					errorDetails := apiErr.Error()
					// –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–Ω–∏–∫—à–µ–π –æ—à–∏–±–∫–µ
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."))
					log.Printf("–û—à–∏–±–∫–∞ 400 –ø—Ä–∏ –≤—ã–∑–æ–≤–µ CreateChatCompletion: %v\n", errorDetails)
					bot.Send(tgbotapi.NewMessage(435809098, errorDetails))
				} else {
					// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π 400, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–Ø —É—Å—Ç–∞–ª–∞ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å, –æ–±–Ω—É–ª—è—é—Å—å"))
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ CreateChatCompletion: %v\n", err)

				}
				continue
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, resp.Choices[0].Message.Content)
			bot.Send(msg)
			req.Messages = append(req.Messages, resp.Choices[0].Message)
		case cmdDeepSeek:
			log.Println("[%s] %s", update.Message.From.UserName, update.Message.Text)

			response, err := DSClient.Query(update.Message.Text)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Deepseek: %v", err)
				response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
			}

			// Print the response
			log.Println("Response:", response)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, response)
			bot.Send(msg)
		case cmdClaude:
			response, err := ClaudeClient.Messages.New(context.TODO(), anthropic.MessageNewParams{
				Model:     anthropic.F(anthropic.ModelClaude_3_5_Sonnet_20240620),
				MaxTokens: anthropic.F(int64(1024)),
				Messages: anthropic.F([]anthropic.MessageParam{
					anthropic.NewUserMessage(anthropic.NewTextBlock("What is a quaternion?")),
				}),
			})
			if err != nil {
				fmt.Println("Error:", err)
				return
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, response.Content[0].Text)
			bot.Send(msg)

		// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é CreateImage –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã
		case cmdImagine:
			respUrl, err := client.CreateImage(
				context.Background(),
				openai.ImageRequest{
					Prompt:         update.Message.CommandArguments(),
					Size:           openai.CreateImageSize256x256,
					ResponseFormat: openai.CreateImageResponseFormatURL,
					N:              1,
				},
			)
			if err != nil {
				log.Printf("Image creation error: %v\n", err)
				continue
			}
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é Telegram API
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, respUrl.Data[0].URL)
			bot.Send(msg)
		default:
			// Ignore any unrecognized commands
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Å—Ç—Ä–æ–∫—É

		if strings.Contains(strings.ToLower(messageText), substr) {
			// –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –¥–Ω—è—Ö
			TimeDifference := time.Since(LastMention).Hours() / 24
			// –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç
			Neib := strconv.Itoa(int(TimeDifference)) + " " + declOfNum(int(TimeDifference), titles) + " –±–µ–∑ —Å–æ—Å–µ–¥–µ–π"
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, Neib))
			log.Println(TimeDifference)
			log.Printf(LastMention.String())
			LastMention = time.Now()
			log.Printf(LastMention.String())
		}
	}

}

// declOfNum returns the proper form of a noun based on the given number.
func declOfNum(number int, titles []string) string {
	// –ï—Å–ª–∏ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–∏–≤–æ–¥–∏–º –µ–≥–æ –∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º—É
	if number < 0 {
		number *= -1
	}
	// –ú–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫ –∫–∞–∂–¥–æ–º—É –ø–∞–¥–µ–∂—É
	cases := []int{2, 0, 1, 1, 1, 2}
	var currentCase int
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–¥–µ–∂–∞
	if number%100 > 4 && number%100 < 20 {
		currentCase = 2
	} else if number%10 < 5 {
		currentCase = cases[number%10]
	} else {
		currentCase = cases[5]
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞–¥–µ–∂–∞
	return titles[currentCase]
}
